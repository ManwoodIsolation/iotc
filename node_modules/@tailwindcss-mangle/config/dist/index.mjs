import path from 'node:path';
import fs from 'node:fs/promises';
import { createDefineConfig, loadConfig } from 'c12';
import dedent from 'dedent';
import { defaultMangleClassFilter } from '@tailwindcss-mangle/shared';

function getDefaultPatchConfig() {
  return {
    output: {
      filename: ".tw-patch/tw-class-list.json",
      removeUniversalSelector: true,
      loose: true
    },
    tailwindcss: {}
  };
}
function getDefaultMangleUserConfig() {
  return {
    mangleClassFilter: defaultMangleClassFilter,
    include: ["**/*.{js,jsx,ts,tsx,svelte,vue}"],
    exclude: ["node_modules/**/*", "**/*.{css,scss,less,sass,postcss,html,htm}"],
    disabled: process.env.NODE_ENV === "development",
    classListPath: ".tw-patch/tw-class-list.json",
    classMapOutput: {
      enable: false,
      filename: ".tw-patch/tw-map-list.json",
      loose: true
    },
    preserveFunction: []
  };
}
function getDefaultUserConfig() {
  return {
    patch: getDefaultPatchConfig(),
    mangle: getDefaultMangleUserConfig()
  };
}

const configName = "tailwindcss-mangle";

function getConfig(cwd) {
  return loadConfig({
    name: configName,
    defaults: {
      ...getDefaultUserConfig()
    },
    cwd
  });
}
const defineConfig = createDefineConfig();
function initConfig(cwd) {
  return fs.writeFile(
    path.resolve(cwd, `${configName}.config.ts`),
    dedent`
      import { defineConfig } from 'tailwindcss-patch'

      export default defineConfig({})
    `,
    "utf8"
  );
}

export { configName, defineConfig, getConfig, getDefaultMangleUserConfig, getDefaultPatchConfig, getDefaultUserConfig, initConfig };
