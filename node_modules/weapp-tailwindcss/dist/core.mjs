import { g as getOptions, c as createTailwindcssPatcher, _ as __awaiter } from './options-B5UOFsZN.mjs';
import 'micromatch';
import 'magic-string';
import './replace.mjs';
import '@weapp-core/escape';
import '@ast-core/escape';
import './shared-D4ZM_mI-.mjs';
import '@weapp-core/regex';
import '@babel/generator';
import '@babel/parser';
import '@babel/traverse';
import './defu-D2_bzAv0.mjs';
import './defaults-DMBtD8TO.mjs';
import '@babel/types';
import 'htmlparser2';
import 'postcss';
import './plugin-Du3zrk3S.mjs';
import 'postcss-selector-parser';
import '@csstools/postcss-is-pseudo-class';
import 'node:path';
import 'node:fs';
import 'semver';
import 'tailwindcss-patch';
import '@tailwindcss-mangle/shared';
import 'lru-cache';
import 'md5';

function createContext(options = {}) {
    const opts = getOptions(options);
    const { templateHandler, styleHandler, patch, jsHandler, tailwindcssBasedir } = opts;
    let runtimeSet = new Set();
    patch === null || patch === void 0 ? void 0 : patch();
    const twPatcher = createTailwindcssPatcher();
    function transformWxss(rawCss) {
        return __awaiter(this, void 0, void 0, function* () {
            const code = yield styleHandler(rawCss, {
                isMainChunk: true
            });
            return code;
        });
    }
    function transformJs(rawJs, options = {}) {
        runtimeSet =
            options && options.runtimeSet
                ? options.runtimeSet
                : twPatcher.getClassSet({
                    basedir: tailwindcssBasedir
                });
        const { code } = jsHandler(rawJs, runtimeSet);
        return code;
    }
    function transformWxml(rawWxml) {
        const code = templateHandler(rawWxml, {
            runtimeSet
        });
        return code;
    }
    return {
        transformWxss,
        transformWxml,
        transformJs
    };
}

export { createContext };
