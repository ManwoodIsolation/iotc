'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var options = require('./options-BAFFNEBI.js');
require('micromatch');
require('magic-string');
require('./replace.js');
require('@weapp-core/escape');
require('@ast-core/escape');
require('./shared-DtRIj-D_.js');
require('@weapp-core/regex');
require('@babel/generator');
require('@babel/parser');
require('@babel/traverse');
require('./defu-JkbfvVKI.js');
require('./defaults-qX2VLo8u.js');
require('@babel/types');
require('htmlparser2');
require('postcss');
require('./plugin-Bxt3oO75.js');
require('postcss-selector-parser');
require('@csstools/postcss-is-pseudo-class');
require('node:path');
require('node:fs');
require('semver');
require('tailwindcss-patch');
require('@tailwindcss-mangle/shared');
require('lru-cache');
require('md5');

function createContext(options$1 = {}) {
    const opts = options.getOptions(options$1);
    const { templateHandler, styleHandler, patch, jsHandler, tailwindcssBasedir } = opts;
    let runtimeSet = new Set();
    patch === null || patch === void 0 ? void 0 : patch();
    const twPatcher = options.createTailwindcssPatcher();
    function transformWxss(rawCss) {
        return options.__awaiter(this, void 0, void 0, function* () {
            const code = yield styleHandler(rawCss, {
                isMainChunk: true
            });
            return code;
        });
    }
    function transformJs(rawJs, options = {}) {
        runtimeSet =
            options && options.runtimeSet
                ? options.runtimeSet
                : twPatcher.getClassSet({
                    basedir: tailwindcssBasedir
                });
        const { code } = jsHandler(rawJs, runtimeSet);
        return code;
    }
    function transformWxml(rawWxml) {
        const code = templateHandler(rawWxml, {
            runtimeSet
        });
        return code;
    }
    return {
        transformWxss,
        transformWxml,
        transformJs
    };
}

exports.createContext = createContext;
