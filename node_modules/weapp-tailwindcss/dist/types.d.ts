import type { Rule } from 'postcss';
import type { IClassGeneratorOptions, ClassGenerator } from '@tailwindcss-mangle/shared';
import type { SourceMap } from 'magic-string';
import type { GeneratorResult } from '@babel/generator';
import type { InjectPreflight } from './postcss/preflight';
import type { ICreateCacheReturnType } from "./cache";
export type ItemOrItemArray<T> = T | T[];
export type AppType = 'uni-app' | 'uni-app-vite' | 'taro' | 'remax' | 'rax' | 'native' | 'kbone' | 'mpx';
export interface IPropValue {
    prop: string;
    value: string;
}
export type CssPresetProps = string;
export type CssPreflightOptions = {
    [key: CssPresetProps]: string | number | boolean;
} | false;
export type RequiredStyleHandlerOptions = {
    isMainChunk: boolean;
    cssInjectPreflight?: InjectPreflight;
    escapeMap?: Record<string, string>;
} & Pick<UserDefinedOptions, 'cssPreflightRange' | 'cssChildCombinatorReplaceValue' | 'replaceUniversalSelectorWith' | 'injectAdditionalCssVarScope' | 'cssSelectorReplacement'>;
export type CustomRuleCallback = (node: Rule, options: Readonly<RequiredStyleHandlerOptions>) => void;
export interface InternalCssSelectorReplacerOptions {
    mangleContext?: IMangleScopeContext;
    escapeMap?: Record<string, string>;
}
export type IStyleHandlerOptions = {
    customRuleCallback?: CustomRuleCallback;
    mangleContext?: IMangleScopeContext;
} & RequiredStyleHandlerOptions;
export type JsHandlerReplaceResult = {
    code: string;
    map?: SourceMap;
};
export type JsHandlerResult = JsHandlerReplaceResult | GeneratorResult;
export type ICustomAttributes = Record<string, ItemOrItemArray<string | RegExp>> | Map<string | RegExp, ItemOrItemArray<string | RegExp>>;
export type ICustomAttributesEntities = [string | RegExp, ItemOrItemArray<string | RegExp>][];
export type IJsHandlerOptions = {
    escapeMap?: Record<string, string>;
    classNameSet?: Set<string>;
    minifiedJs?: boolean;
    arbitraryValues?: IArbitraryValues;
    mangleContext?: IMangleScopeContext;
    jsPreserveClass?: (keyword: string) => boolean | undefined;
    strategy?: UserDefinedOptions['jsEscapeStrategy'];
    needEscaped?: boolean;
    generateMap?: boolean;
    always?: boolean;
};
export interface RawSource {
    start: number;
    end: number;
    raw: string;
    source?: string;
}
export interface ILengthUnitsPatchDangerousOptions {
    packageName?: string;
    gteVersion?: string;
    lengthUnitsFilePath?: string;
    variableName?: string;
    overwrite?: boolean;
    destPath?: string;
}
export interface ILengthUnitsPatchOptions {
    units: string[];
    paths?: string[];
    dangerousOptions?: ILengthUnitsPatchDangerousOptions;
    basedir?: string;
}
export interface IMangleOptions {
    classGenerator?: IClassGeneratorOptions;
    mangleClassFilter?: (className: string) => boolean;
}
export interface IArbitraryValues {
    allowDoubleQuotes?: boolean;
}
export interface UserDefinedOptions {
    htmlMatcher?: ((name: string) => boolean) | string | string[];
    cssMatcher?: ((name: string) => boolean) | string | string[];
    jsMatcher?: ((name: string) => boolean) | string | string[];
    mainCssChunkMatcher?: ((name: string, appType?: AppType) => boolean) | string | string[];
    cssPreflight?: CssPreflightOptions;
    cssPreflightRange?: 'view' | 'all';
    replaceUniversalSelectorWith?: string | false;
    disabled?: boolean;
    customRuleCallback?: CustomRuleCallback;
    onLoad?: () => void;
    onStart?: () => void;
    onUpdate?: (filename: string, oldVal: string, newVal: string) => void;
    onEnd?: () => void;
    customAttributes?: ICustomAttributes;
    customReplaceDictionary?: 'simple' | 'complex' | Record<string, string>;
    supportCustomLengthUnitsPatch?: ILengthUnitsPatchOptions | boolean;
    appType?: AppType;
    minifiedJs?: boolean;
    mangle?: boolean | IMangleOptions;
    arbitraryValues?: IArbitraryValues;
    cssChildCombinatorReplaceValue?: string | string[];
    wxsMatcher?: ((name: string) => boolean) | string | string[];
    inlineWxs?: boolean;
    injectAdditionalCssVarScope?: boolean;
    jsPreserveClass?: (keyword: string) => boolean | undefined;
    disabledDefaultTemplateHandler?: boolean;
    jsEscapeStrategy?: 'regenerate' | 'replace';
    runtimeLoaderPath?: string;
    cssSelectorReplacement?: {
        root?: string | false;
        universal?: string | false;
    };
    tailwindcssBasedir?: string;
}
export type JsHandler = (rawSource: string, set: Set<string>, options?: CreateJsHandlerOptions) => JsHandlerResult;
export interface IMangleScopeContext {
    rawOptions: UserDefinedOptions['mangle'];
    runtimeSet: Set<string>;
    classGenerator: ClassGenerator;
    filter: (className: string) => boolean;
    cssHandler: (rawSource: string) => string;
    jsHandler: (rawSource: string) => string;
    wxmlHandler: (rawSource: string) => string;
}
export interface ICommonReplaceOptions {
    keepEOL?: boolean;
    escapeMap?: Record<string, string>;
}
export interface ITemplateHandlerOptions extends ICommonReplaceOptions {
    customAttributesEntities?: ICustomAttributesEntities;
    escapeMap?: Record<string, string>;
    mangleContext?: IMangleScopeContext;
    inlineWxs?: boolean;
    jsHandler?: JsHandler;
    runtimeSet?: Set<string>;
    disabledDefaultTemplateHandler?: boolean;
    quote?: string | null;
}
export type GlobOrFunctionMatchers = 'htmlMatcher' | 'cssMatcher' | 'jsMatcher' | 'mainCssChunkMatcher' | 'wxsMatcher';
export type InternalUserDefinedOptions = Required<Omit<UserDefinedOptions, GlobOrFunctionMatchers | 'supportCustomLengthUnitsPatch' | 'customReplaceDictionary'> & {
    [K in GlobOrFunctionMatchers]: K extends 'mainCssChunkMatcher' ? (name: string, appType?: AppType) => boolean : (name: string) => boolean;
} & {
    supportCustomLengthUnitsPatch: ILengthUnitsPatchOptions | false;
    templateHandler: (rawSource: string, options?: ITemplateHandlerOptions) => string;
    styleHandler: (rawSource: string, options: IStyleHandlerOptions) => Promise<string>;
    jsHandler: JsHandler;
    escapeMap: Record<string, string>;
    patch: () => void;
    customReplaceDictionary: Record<string, string>;
    setMangleRuntimeSet: (runtimeSet: Set<string>) => void;
    cache: ICreateCacheReturnType;
}>;
export type InternalPostcssOptions = Pick<UserDefinedOptions, 'cssMatcher' | 'mainCssChunkMatcher' | 'cssPreflight' | 'replaceUniversalSelectorWith' | 'cssPreflightRange' | 'customRuleCallback' | 'disabled'>;
export interface IBaseWebpackPlugin {
    options: InternalUserDefinedOptions;
    appType?: AppType;
    apply: (compiler: any) => void;
}
export interface InternalPatchResult {
    dataTypes?: string;
    processTailwindFeatures?: string;
    plugin?: string;
}
export type CreateJsHandlerOptions = Omit<IJsHandlerOptions, 'classNameSet'>;
