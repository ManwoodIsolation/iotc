import { SimpleMappingChars2String } from '@weapp-core/escape';
import '@ast-core/escape';

function isMap(value) {
    return Object.prototype.toString.call(value) === '[object Map]';
}
const noop = () => { };
function groupBy(arr, cb) {
    if (!Array.isArray(arr)) {
        throw new TypeError('expected an array for first argument');
    }
    if (typeof cb !== 'function') {
        throw new TypeError('expected a function for second argument');
    }
    const result = {};
    for (const item of arr) {
        const bucketCategory = cb(item);
        const bucket = result[bucketCategory];
        if (Array.isArray(bucket)) {
            result[bucketCategory].push(item);
        }
        else {
            result[bucketCategory] = [item];
        }
    }
    return result;
}
function getGroupedEntries(entries, options) {
    const { cssMatcher, htmlMatcher, jsMatcher, wxsMatcher } = options;
    const groupedEntries = groupBy(entries, ([file]) => {
        if (cssMatcher(file)) {
            return 'css';
        }
        else if (htmlMatcher(file)) {
            return 'html';
        }
        else if (jsMatcher(file) || wxsMatcher(file)) {
            return 'js';
        }
        else {
            return 'other';
        }
    });
    return groupedEntries;
}
function removeExt(file) {
    return file.replace(/\.[^./]+$/, '');
}

const defaultOptions = {
    cssMatcher: (file) => /.+\.(?:wx|ac|jx|tt|q|c)ss$/.test(file),
    htmlMatcher: (file) => /.+\.(?:(?:(?:wx|ax|jx|ks|tt|q)ml)|swan)$/.test(file),
    jsMatcher: (file) => {
        if (file.includes('node_modules')) {
            return false;
        }
        return /.+\.[cm]?js?$/.test(file);
    },
    mainCssChunkMatcher: (file, appType) => {
        switch (appType) {
            case 'uni-app': {
                return /^common\/main/.test(file);
            }
            case 'uni-app-vite': {
                return file.startsWith('app') || /^common\/main/.test(file);
            }
            case 'mpx': {
                return file.startsWith('app');
            }
            case 'taro': {
                return file.startsWith('app');
            }
            case 'remax': {
                return file.startsWith('app');
            }
            case 'rax': {
                return file.startsWith('bundle');
            }
            case 'native': {
                return file.startsWith('app');
            }
            case 'kbone': {
                return /^(?:common\/)?miniprogram-app/.test(file);
            }
            default: {
                return true;
            }
        }
    },
    wxsMatcher: () => {
        return false;
    },
    cssPreflight: {
        'box-sizing': 'border-box',
        'border-width': '0',
        'border-style': 'solid',
        'border-color': 'currentColor'
    },
    cssPreflightRange: 'view',
    replaceUniversalSelectorWith: 'view',
    disabled: false,
    customRuleCallback: noop,
    onLoad: noop,
    onStart: noop,
    onEnd: noop,
    onUpdate: noop,
    customAttributes: {},
    customReplaceDictionary: SimpleMappingChars2String,
    supportCustomLengthUnitsPatch: {
        units: ['rpx'],
        dangerousOptions: {
            gteVersion: '3.0.0',
            lengthUnitsFilePath: 'lib/util/dataTypes.js',
            packageName: 'tailwindcss',
            variableName: 'lengthUnits',
            overwrite: true
        }
    },
    appType: undefined,
    arbitraryValues: {
        allowDoubleQuotes: false
    },
    cssChildCombinatorReplaceValue: 'view + view',
    inlineWxs: false,
    injectAdditionalCssVarScope: false,
    jsPreserveClass: (keyword) => {
        if (keyword === '*') {
            return true;
        }
        return false;
    },
    disabledDefaultTemplateHandler: false,
    jsEscapeStrategy: 'replace',
    cssSelectorReplacement: {
        root: 'page',
        universal: 'view'
    }
};

export { defaultOptions as d, getGroupedEntries as g, isMap as i, noop as n, removeExt as r };
