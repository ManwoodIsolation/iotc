import { g as getOptions, c as createTailwindcssPatcher, _ as __awaiter } from './options-B5UOFsZN.mjs';
import stream from 'node:stream';

const Transform = stream.Transform;
function createPlugins(options = {}) {
    const opts = getOptions(options);
    const { templateHandler, styleHandler, patch, jsHandler, setMangleRuntimeSet, tailwindcssBasedir } = opts;
    let runtimeSet = new Set();
    patch === null || patch === void 0 ? void 0 : patch();
    const twPatcher = createTailwindcssPatcher();
    function transformWxss() {
        const transformStream = new Transform({ objectMode: true });
        transformStream._transform = function (file, encoding, callback) {
            return __awaiter(this, void 0, void 0, function* () {
                runtimeSet = twPatcher.getClassSet({
                    basedir: tailwindcssBasedir
                });
                setMangleRuntimeSet(runtimeSet);
                const error = null;
                if (file.contents) {
                    const code = yield styleHandler(file.contents.toString(), {
                        isMainChunk: true
                    });
                    file.contents = Buffer.from(code);
                }
                callback(error, file);
            });
        };
        return transformStream;
    }
    function transformJs() {
        const transformStream = new Transform({ objectMode: true });
        transformStream._transform = function (file, encoding, callback) {
            const error = null;
            if (file.contents) {
                const { code } = jsHandler(file.contents.toString(), runtimeSet);
                file.contents = Buffer.from(code);
            }
            callback(error, file);
        };
        return transformStream;
    }
    function transformWxml() {
        const transformStream = new Transform({ objectMode: true });
        transformStream._transform = function (file, encoding, callback) {
            const error = null;
            if (file.contents) {
                const code = templateHandler(file.contents.toString(), {
                    runtimeSet
                });
                file.contents = Buffer.from(code);
            }
            callback(error, file);
        };
        return transformStream;
    }
    return {
        transformWxss,
        transformWxml,
        transformJs
    };
}

export { createPlugins as c };
